#!/usr/bin/env python

import json
import os
    
import brownie
from brownie.network import accounts as br_accounts
import pytest
from pytest import approx
    
from ocean_lib.example_config import get_config_dict
from ocean_lib.web3_internal.utils import connect_to_network
from ocean_lib.ocean.ocean import Ocean
from ocean_lib.ocean.mint_fake_ocean import mint_fake_OCEAN
from ocean_lib.ocean.util import from_wei, to_wei

#must be the same file as generated by deploy.py
ADDRESS_FILE = "~/.ocean/ocean-contracts/artifacts/address.json"

chain = brownie.network.chain

connect_to_network("development")

#create base accounts
deployer = br_accounts.add(os.getenv("FACTORY_DEPLOYER_PRIVATE_KEY"))
opf = br_accounts.add(os.getenv("TEST_PRIVATE_KEY1"))
alice = br_accounts.add(os.getenv("TEST_PRIVATE_KEY2"))
bob = br_accounts.add()

#set ocean object
address_file = os.path.expanduser(ADDRESS_FILE)
print(f"Load contracts from address_file: {address_file}")
config = get_config_dict("development")
config["ADDRESS_FILE"] = address_file
ocean = Ocean(config, "no_provider") #is this the issue??

#DEPLOYER mints 20K OCEAN, and sends 2K OCEAN to TEST_PRIVATE_KEY1 & 2
mint_fake_OCEAN(config)

#
OCEAN = ocean.OCEAN_token

data_nft = ocean.data_nft_factory.create(
    {"from": alice}, "DNFT1", "DNFT1")

DT = data_nft.create_datatoken(
    {"from": alice},
    template_index=1,
    cap=None,
    name="DT1",
    symbol="DT1Symbol",
    minter=alice.address, #is this the issue?? I need this i think
)

use_high_level = False #change to True or False

if use_high_level: #use high-level interface: DatatokenBase.create_exchange()
    
    #the following fails with: ValueError: Gas estimation failed: 'VM Exception while processing transaction: revert'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.
    exchange = DT.create_exchange(
        rate=to_wei(3),
        base_token_addr=OCEAN.address,
        tx_dict={"from": alice},
        with_mint=False,
    )

else:  #use low-level interface: direct call to ERC20Template.createFixedRate()
    from ocean_lib.web3_internal.contract_base import ContractBase
    checksum_addr = ContractBase.to_checksum_address

    FRE_addr = ocean.fixed_rate_exchange.address

    BT_addr = OCEAN.address
    owner_addr = alice.address
    pub_mkt_fee_coll = alice.address
    allowed_swapper = '0x0000000000000000000000000000000000000000'

    BT_decimals = OCEAN.decimals()
    DT_decimals = DT.decimals()
    rate = to_wei(3)
    pub_mkt_fee = 0
    with_mint = True

    addrs = [
        checksum_addr(BT_addr),
        checksum_addr(owner_addr),
        pub_mkt_fee_coll, #should this be checksummed?
        allowed_swapper,
        ]

    ints = [
        BT_decimals,
        DT_decimals,
        rate,
        pub_mkt_fee,
        with_mint,
        ]

    from ocean_lib.web3_internal.utils import get_gas_fees
    priority_fee, max_fee = get_gas_fees()

    tx_dict = {"from":alice}
    #tx_dict = {"from":alice,"gas_limit":12000000}
    #tx_dict = {"from":alice, "priority_fee": priority_fee, "max_fee": max_fee}

    #the following lines fails with: ValueError: Gas estimation failed: 'VM Exception while processing transaction: revert'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.
    tx = DT.contract.createFixedRate(FRE_addr, addrs, ints, tx_dict)
